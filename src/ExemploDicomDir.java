
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;

import java.util.Vector;
import fr.apteryx.imageio.dicom.Tag;
import fr.apteryx.imageio.dicom.DataElement;
import fr.apteryx.imageio.dicom.DataSet;
import fr.apteryx.imageio.dicom.DicomReader;

import javax.imageio.ImageIO;
import javax.imageio.stream.FileImageInputStream;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import javax.swing.table.*;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;

import java.awt.event.ActionEvent;

public class ExemploDicomDir extends javax.swing.JFrame implements ListSelectionListener{
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** Creates new form ExemploDicomDir */
	
    Vector<Atributes> atributosExames;
    DefaultListSelectionModel list;
    public ExemploDicomDir() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        txtPath = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableExames = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        browsechooser = new javax.swing.JFileChooser();
        
        browsechooser.setDialogTitle("Directory of the DICOMDIR file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        txtPath.setText("C:"+File.separator+"Users"+File.separator+"Joao Luís Sousa"+File.separator+"Desktop"+File.separator+"TP4_cópia"+File.separator+"Normaiscopy"+File.separator+"Normais"+File.separator+"DICOMDIR");
        txtPath.setName("txtPath");

        lblTitle.setText("DicomDir Path:");
        lblTitle.setName("lblPath");

        btnShow.setText("Show");
        btnShow.setName("btnShow");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        tableExames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableExames);

        fileMenu.setText("File");
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);
        
        JButton btnBrowse = new JButton();
        btnBrowse.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		browseActionPerformed(e);
        	}
        });
        btnBrowse.setText("Browse");
        btnBrowse.setName("btnShow");
        

        GroupLayout layout = new GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(lblTitle, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
        							.addComponent(txtPath, GroupLayout.PREFERRED_SIZE, 512, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(btnBrowse, GroupLayout.PREFERRED_SIZE, 77, GroupLayout.PREFERRED_SIZE)
        							.addGap(7))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)))
        					.addContainerGap())
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(btnShow)
        					.addGap(309))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE, false)
        				.addComponent(lblTitle)
        				.addComponent(txtPath, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnBrowse))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnShow)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
        				.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 402, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);
        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    	
	   // TODO add your handling code here:
       try{  
	        ReadDicomDir dirRead = new ReadDicomDir();
	        Vector<String> colNames=new Vector<String>();
	        colNames.addElement("Tipo Exame");
	        colNames.addElement("ID");
	        colNames.addElement("Data");
	        colNames.addElement("Paciente");
	        
	        Vector<Vector<String>> tabela = new Vector<Vector<String>>();
	        atributosExames = new Vector<Atributes>();
	        Vector<Atributes> results = null;
	        try{
	        	results = dirRead.leDirectorio(txtPath.getText(),atributosExames);
	        	
	        	for (int i = 0; i < results.size(); i++) {
					Vector<String> line = new Vector<String>();
					line.add(results.get(i).getSeriesAtributes().findString(Tag.Modality));
					line.add(results.get(i).getPatientAtributes().findString(Tag.PatientID));
					line.add(results.get(i).getPatientAtributes().findString(Tag.PatientsBirthDate));
					line.add(results.get(i).getPatientAtributes().findString(Tag.PatientsName));
					tabela.addElement(line);
				}
	        	atributosExames = results;
	        	
	        }catch(Exception e){
	            JOptionPane.showMessageDialog(this, "Invalid DicomDir","Warning", JOptionPane.WARNING_MESSAGE);
	        }
	        
	       TableModel tbModel = new DefaultTableModel(tabela,colNames){
			private static final long serialVersionUID = 1L;

				public boolean isCellEditable(int row, int col)
	            { 
	            	return false; 
	            }
	       };
	        tableExames.setModel(tbModel);
	        
	        list = new DefaultListSelectionModel();
	        
	        list.addListSelectionListener(this);
	        tableExames.setSelectionModel(list);
	        tableExames.validate();
	        txtArea.setText("");
	       
	        this.repaint();
        
       }catch(Exception e){JOptionPane.showMessageDialog(this, "Error Ocurred","Warning", JOptionPane.WARNING_MESSAGE);;}       
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    
    private void browseActionPerformed(java.awt.event.ActionEvent evt){
    	browsechooser.showOpenDialog(btnShow);
    	txtPath.setText(browsechooser.getSelectedFile().getPath());    	
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        try{
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run(){
                    new ExemploDicomDir().setVisible(true);
                }
            }); 
        }catch(Exception e){System.out.println("Error while initiating");}
    }
    
    public void valueChanged(ListSelectionEvent e){
        //        if(examProp.frameAtributos != null)
        //                examProp.frameAtributos.dispose();
        DefaultListSelectionModel auxiliar = (DefaultListSelectionModel) (e.getSource());
        if(auxiliar.equals(list) && e.getValueIsAdjusting() == false){
            Atributes attTemp = (Atributes) atributosExames.elementAt(Character.getNumericValue(e.getSource().toString().charAt(e.getSource().toString().length()-2)));
            txtArea.setText(attTemp.regImage.toString());
            DataSet imagem = attTemp.getImageAtributes();
            double delay = imagem.findFloat(Tag.FrameTime);
            String Title = attTemp.getPatientAtributes().findString(Tag.PatientsName) + " " + attTemp.getSeriesAtributes().findString(Tag.Modality);
            String path = txtPath.getText();
            if (path.contains("DICOMDIR")){ path = path.substring(0,path.length()-8);}
			String imageDir[] = ((String[]) ((DataElement) imagem.get(Tag.ReferencedFileID)).value);
			for (String str : imageDir) {path += str + File.separator;}
			path=path.substring(0,path.length()-1);

            try{
                ImageIO.scanForPlugins();
                DicomReader dicomreader = (DicomReader) ImageIO.getImageReadersByFormatName("dicom").next();
    			dicomreader.setInput(new FileImageInputStream(new File(path)));		
    			int Nimg = dicomreader.getNumImages(true);
    			BufferedImage[] dicomimages = new BufferedImage[Nimg];
    			
    			for (int i = 0; i < Nimg; ++i){dicomimages[i] = dicomreader.read(i);}
    			
    			new Player(dicomimages,delay,Title);	
            }catch (Exception e1) { e1.printStackTrace();}
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton btnShow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTable tableExames;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtPath;
    private javax.swing.JFileChooser browsechooser;
}
